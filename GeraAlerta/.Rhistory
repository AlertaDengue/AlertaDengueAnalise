source("organizaDados/organizaTemperatura.r")
source("organizaDados/organizatweets.r")
source("organizaDados/organizatweets.r")
source("organizaDados/organizaTemperatura.r")
source("organizaDados/organizaTemperatura.r")
novosinan2015 <- "dados_brutos/sinan/Dengue04_05_2015.dbf"
novosinan2014 <- "dados_brutos/sinan/Dengue2014_23_03_2015.dbf"
source("organizaDados/organizasinan.r")
source("organizaDados/organizasinan.r")
source("organizaDados//juntaTudo.r")
dadosAPS<-"dados_limpos/dadosAPS_201517.csv"
source("geraAlerta/geraAlerta.r")
setwd("~/Documentos/AlertaDengueAnalise/GeraAlerta")
rm(list=ls())
library(knitr)
library(markdown)
library(foreign)
library(rmongodb)
library(rgeos)
library(maptools)
source("fun/callmongoclima.r")
source("organizaDados/organizaTemperatura.r")
source("organizaDados/organizatweets.r")
source("organizaDados/organizasinan.r")
novosinan2014 <- "dados_brutos/sinan/Dengue2014_23_03_2015.dbf"
novosinan2015 <- "dados_brutos/sinan/Dengue04_05_2015.dbf"
source("organizaDados/organizasinan.r")
source("organizaDados//juntaTudo.r")
dadosAPS<-"dados_limpos/dadosAPS_201517.csv"
source("geraAlerta/geraAlerta.r")
getData <- function(dadosAPS,correction="lognormal",ini=201001){
dd<-subset(dd,SE>=ini)
listaAPS<-unique(dd$APS)
if (correction=="lognormal") for(i in 1:10) dd$casosm[dd$APS==listaAPS[i]] <-corrigecasos(dd$casos[dd$APS==listaAPS[i]])
tot<-aggregate(dd$casosm,by=list(dd$SE),sum)
names(tot)<-c("SE","casosestimados")
message("correcao da incidencia pelo atraso de notificacao")
print(tail(tot))
list(dd,tot)
}
d<-getData(dadosAPS)
getData <- function(dadosAPS,correction="lognormal",ini=201001){
d<-read.csv(dadosAPS)
dd<-subset(d,SE>=ini)
listaAPS<-unique(dd$APS)
if (correction=="lognormal") for(i in 1:10) dd$casosm[dd$APS==listaAPS[i]] <-corrigecasos(dd$casos[dd$APS==listaAPS[i]])
tot<-aggregate(dd$casosm,by=list(dd$SE),sum)
names(tot)<-c("SE","casosestimados")
message("correcao da incidencia pelo atraso de notificacao")
print(tail(tot))
list(dd,tot)
}
d<-getData(dadosAPS)
source("fun/Rt.r")
source("fun/data2SE.r")
source("fun/corrigecasos.r")
dadosAPS
getData <- function(dadosAPS,correction="lognormal",ini=201001){
d<-read.csv(dadosAPS)
dd<-subset(d,SE>=ini)
listaAPS<-unique(dd$APS)
if (correction=="lognormal") for(i in 1:10) dd$casosm[dd$APS==listaAPS[i]] <-corrigecasos(dd$casos[dd$APS==listaAPS[i]])
tot<-aggregate(dd$casosm,by=list(dd$SE),sum)
names(tot)<-c("SE","casosestimados")
message("correcao da incidencia pelo atraso de notificacao")
print(tail(tot))
list(dd,tot)
}
d<-getData(dadosAPS)
geraAlerta <- function(d,fun="original",pop="tabelas/populacao2010porAPS_RJ.csv",tempcrit=22){
# Aplica o modelo original de alerta (desenvolvido pela claudia em 2014)
listaAPS<-unique(d$APS)
# data.frame para colocar os resultados
SE<-d$SE[d$APS==listaAPS[1]]
d2 <- expand.grid(SE=SE,APS=listaAPS)
d2<-merge(d2,d[,c("SE","APS","data","tweets","estacao","casos","casosm","tmin")],by=c("SE","APS")) # precisa especificar colunas?
# agregar dados de populacao (cuidado, desorganiza tudo!)
pop<-read.csv(file=pop)
d2<-merge(d2,pop)
d2<-d2[order(d2$APS,d2$SE),]
#"Alerta de Temperatura minima semanal > 22 graus por 3 semanas"
#Temperatura > Tcrit
detcli <- function(temp,tempcrit=tempcrit,lag=3){
t1<-as.numeric(temp>=tempcrit)
le <- length(t1)
ac <- t1[lag:le]
for(i in 1:(lag-1)) ac <- ac+t1[(lag-i):(le-i)]
c(rep(NA,(lag-1)),ac)
}
d2$alertaCli <- NA
for(i in 1:10) d2$alertaCli[which(d2$APS==listaAPS[i])] <-detcli(d2$tmin[d2$APS==listaAPS[i]])
# Alerta de Tweet usa Rt beta
# Rtw = crescimento significativo de tweet na ultima semana (repete os valores para todas as APS)
d2$Rtw <-NA  # Rt do tweet
d2$ptw1 <-NA # Prob(Rt tweet >1)
d2$Rtwlr <-NA # lim inf IC Rt tweet
d2$Rtwur <-NA  # lim sup IC Rt tweet
for(i in 1:10) d2[d2$APS==listaAPS[i],c("Rtw","ptw1","Rtwlr","Rtwur")] <- Rt.beta(d2$tweets[d2$APS==listaAPS[i]])
# Rt > 1 se pr(Rt >1) > pcrit por lag weeks  # serve tanto para Rt de tweet como para casos
Rtgreat1 <- function(p1,pcrit=0.8,lag=0){
t1<-as.numeric(p1>pcrit)
le <- length(t1)
if (lag==0) ac<-t1[1:le]
if (lag>0) {
ini <- lag # ini <- (lag+1)
ac <- t1[ini:le]
for(i in 1:(ini-1)) ac <- ac+t1[(ini-i):(le-i)]
ac<-c(rep(NA,(ini-1)),ac)
}
ac
}
# Calcula se Rt(tweet) > 1
for(i in 1:10) d2$twgreat1[d2$APS==listaAPS[i]] <-Rtgreat1(d2$ptw1[d2$APS==listaAPS[i]],pcrit=0.85,lag=0)
# alertaRtweet = acumulado de Rt>1 por 3 vezes
for(i in 1:10) d2$alertaRtweet[d2$APS==listaAPS[i]] <-Rtgreat1(d2$ptw1[d2$APS==listaAPS[i]],pcrit=0.85,lag=3)
# calculo do Rt de dengue
d2$Rt <-NA
d2$pRt1 <-NA
d2$Rtlr <-NA
d2$Rtur <-NA
for(i in 1:10) d2[d2$APS==listaAPS[i],c("Rt","pRt1","Rtlr","Rtur")] <- Rt.beta((d2$casosm[d2$APS==listaAPS[i]]))
#  imputa os P(Rt) de casos faltantes com p(Rtw) dos tweets
d2$pRti <- d2$pRt1
d2$pRti[is.na(d2$pRt1)]<-d2$ptw1[is.na(d2$pRt1)]
# Rt(dengue) > 1 se Pr>0.85
for(i in 1:10) d2$Rtgreat1[d2$APS==listaAPS[i]] <-Rtgreat1(d2$pRti[d2$APS==listaAPS[i]],pcrit=0.85,lag=0)
# alertaRt = acumulado de Rt>1 por 3 vezes
for(i in 1:10) d2$alertaRt[d2$APS==listaAPS[i]] <-Rtgreat1(d2$pRti[d2$APS==listaAPS[i]],pcrit=0.85,lag=3)
# Casos:
# onde houver dados faltantes, completar calculando o valor esperado considerando a tendencia de variacao das ultimas 3 semanas.
# Isso é, calcula a média de variacao (Rt) das ultimas 3 semanas e multiplica pelo valor observado de casos.
fillCasos <- function(casos, Rt){
casos_est <- casos
n <- which(is.na(casos_est))
if(length(n)>0) casos_est[n]<-casos[(n-2)]*mean(Rt[(n-2)],na.rm=TRUE)
casos_est
}
d2$casos_est<-NA
for(i in 1:10) d2$casos_est[d2$APS==listaAPS[i]]<-fillCasos((d2$casos[d2$APS==listaAPS[i]]),
d2$Rt[d2$APS==listaAPS[i]])
d2$inc <- d2$casos_est/d2$Pop2010*100000
d2$alertaCasos <- as.numeric(d2$inc>100)
#Resultado
# - alertaClima = 1, se temperatura > 22C por mais de 3 semanas
# - alertaTweet = 1, se Tweet com tendencia de aumento
# - alertaTransmissao = 1, se casos com tendencia de aumento
# - alertaCasos = 1, se Incidencia > 100 por 100 mil
le = length(d2$tmin[d2$APS==listaAPS[1]])
#funcao que define cor
def.cor<-function(d2v){
# d2v = dados de uma ap
# 1 = verde, 2=amarelo, 3 =laranja, 4 = vermelho
les = dim(d2v)[1]
d2v$cor <-NA
d2v$cor[intersect(6:les,which(d2v$alertaCli<3 & d2v$alertaRtweet<3 & d2v$alertaRt<3 & d2v$alertaCasos==0))]<-1
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3 | d2v$alertaRtweet>=3))]<-2
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3| d2v$alertaRtweet>=3)+1)]<-2 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3| d2v$alertaRtweet>=3)+2)]<-2 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3| d2v$alertaRtweet>=3)+3)]<-2 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3))]<-3
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3)+1)]<-3 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3)+2)]<-3 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3)+3)]<-3 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1))]<-4
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1)+1)]<-4  # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1)+2)]<-4   # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1)+3)]<-4
d2v
}
d2$cor<-NA
for(i in 1:10) d2[d2$APS==listaAPS[i],]<-def.cor(d2[d2$APS==listaAPS[i],])
# codificacao para o relatorio
d2$alertaTweet <- ifelse(d2$alertaRtweet>=3,1,0)
d2$alertaClima <- ifelse(d2$alertaCli>=3,1,0)
d2$alertaTransmissao <- ifelse(d2$alertaRt>=3,1,0)
d2$nivel<-"nulo"
d2$nivel[d2$cor==1]<-"verde"
d2$nivel[d2$cor==2]<-"amarelo"
d2$nivel[d2$cor==3]<-"laranja"
d2$nivel[d2$cor==4]<-"vermelho"
d2
}
geraAlerta(d)
d2<-geraAlerta(d)
getData <- function(dadosAPS,correction="lognormal",ini=201001){
d<-read.csv(dadosAPS)
dd<-subset(d,SE>=ini)
listaAPS<-unique(dd$APS)
if (correction=="lognormal") for(i in 1:10) dd$casosm[dd$APS==listaAPS[i]] <-corrigecasos(dd$casos[dd$APS==listaAPS[i]])
tot<-aggregate(dd$casosm,by=list(dd$SE),sum)
names(tot)<-c("SE","casosestimados")
message("correcao da incidencia pelo atraso de notificacao")
print(tail(tot))
list(dd,tot)
}
d<-getData(dadosAPS)
d2<-geraAlerta(d)
names(d)
getData <- function(dadosAPS,correction="lognormal",ini=201001){
d<-read.csv(dadosAPS)
dd<-subset(d,SE>=ini)
listaAPS<-unique(dd$APS)
if (correction=="lognormal") for(i in 1:10) dd$casosm[dd$APS==listaAPS[i]] <-corrigecasos(dd$casos[dd$APS==listaAPS[i]])
tot<-aggregate(dd$casosm,by=list(dd$SE),sum)
names(tot)<-c("SE","casosestimados")
message("correcao da incidencia pelo atraso de notificacao")
print(tail(tot))
dd
}
d<-getData(dadosAPS)
names(d)
d2<-geraAlerta(d)
source("organizaDados/organizaTemperatura.r")
source("organizaDados/organizaTemperatura.r")
d<-callmongoclima("galeao")
setwd("~/Documentos/AlertaDengueAnalise/GeraAlerta")
rm(list=ls())
library(knitr)
library(markdown)
library(foreign)
library(rmongodb)
library(rgeos)
library(maptools)
source("fun/callmongoclima.r")
source("organizaDados/organizaTemperatura.r")
source("organizaDados/organizatweets.r")
source("organizaDados/organizatweets.r")
dlnorm(x=1:20,meanlog = 0.56,sdlog = 13.7)
curve(dlnorm(x,meanlog = 0.56,sdlog = 13.7),0,10)
curve(dlnorm(x,meanlog = 0.56,sdlog = 13.7),1,10)
curve(dlnorm(x,meanlog = log(0.56),sdlog = 13.7),1,10)
curve(dlnorm(x,meanlog = 0.56,sdlog = 13.7),1,10)
curve(dlnorm(x,meanlog = 0.56,sdlog = 13.7),1,10,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 5.9,sdlog = 13.7),1,10,ylab="EH",xlab="days")
?dlnorm
curve(dlnorm(x,meanlog = 5.9,sdlog = 13.7),1,10,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 10,sdlog = 13.7),1,10,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 10,sdlog = 1.7),1,10,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 10,sdlog = 1.7),1,30,ylab="EH",xlab="days")
curve(plnorm(x,meanlog = 10,sdlog = 1.7),1,30,ylab="EH",xlab="days")
curve(plnorm(x,meanlog = 3,sdlog = 1.7),1,30,ylab="EH",xlab="days")
curve(plnorm(x,meanlog = 3,sdlog = 1.7),1,100,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 3,sdlog = 1.7),1,100,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 20,sdlog = 1.7),1,100,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 10,sdlog = 1.7),1,100,ylab="EH",xlab="days")
curve(qlnorm(x,meanlog = 10,sdlog = 1.7),1,100,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 10,sdlog = 1.7),1,100,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 2,sdlog = 1.7),1,100,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 2,sdlog = 0.17),1,100,ylab="EH",xlab="days")
curve(dlnorm(x,meanlog = 2,sdlog = 0.17),1,20,ylab="EH",xlab="days")
exp(2)
abline(v=7.4)
log(5.9)
curve(dlnorm(x,meanlog = 1.8,sdlog = 0.17),1,20,ylab="EH",xlab="days")
exp(1.9)
source("organizaDados/organizatweets.r")
source("organizaDados//juntaTudo.r")
exp(0.56)
curve(dlnorm(x,meanlog = 1.8,sdlog = 0.17),1,20,ylab="EH",xlab="days")
novosinan2014 <- "dados_brutos/sinan/Dengue2014_23_03_2015.dbf"
novosinan2015 <- "dados_brutos/sinan/Dengue2015_06_05_2015.dbf"
source("organizaDados/organizasinan.r")
source("organizaDados//juntaTudo.r")
dadosAPS<-"dados_limpos/dadosAPS_201518.csv"
source("geraAlerta/geraAlerta.r")
getData <- function(dadosAPS,correction="lognormal",ini=201001){
d<-read.csv(dadosAPS)
dd<-subset(d,SE>=ini)
listaAPS<-unique(dd$APS)
if (correction=="lognormal") for(i in 1:10) dd$casosm[dd$APS==listaAPS[i]] <-corrigecasos(dd$casos[dd$APS==listaAPS[i]])
tot<-aggregate(dd$casosm,by=list(dd$SE),sum)
names(tot)<-c("SE","casosestimados")
message("correcao da incidencia pelo atraso de notificacao")
print(tail(tot))
dd
}
d<-getData(dadosAPS)
geraAlerta <- function(d,fun="original",pop="tabelas/populacao2010porAPS_RJ.csv",tempcrit=22){
# Aplica o modelo original de alerta (desenvolvido pela claudia em 2014)
listaAPS<-unique(d$APS)
# data.frame para colocar os resultados
SE<-d$SE[d$APS==listaAPS[1]]
d2 <- expand.grid(SE=SE,APS=listaAPS)
d2<-merge(d2,d[,c("SE","APS","data","tweets","estacao","casos","casosm","tmin")],by=c("SE","APS")) # precisa especificar colunas?
# agregar dados de populacao (cuidado, desorganiza tudo!)
pop<-read.csv(file=pop)
d2<-merge(d2,pop)
d2<-d2[order(d2$APS,d2$SE),]
#"Alerta de Temperatura minima semanal > 22 graus por 3 semanas"
#Temperatura > Tcrit
detcli <- function(temp,tempcrit=tempcrit,lag=3){
t1<-as.numeric(temp>=tempcrit)
le <- length(t1)
ac <- t1[lag:le]
for(i in 1:(lag-1)) ac <- ac+t1[(lag-i):(le-i)]
c(rep(NA,(lag-1)),ac)
}
d2$alertaCli <- NA
for(i in 1:10) d2$alertaCli[which(d2$APS==listaAPS[i])] <-detcli(d2$tmin[d2$APS==listaAPS[i]])
# Alerta de Tweet usa Rt beta
# Rtw = crescimento significativo de tweet na ultima semana (repete os valores para todas as APS)
d2$Rtw <-NA  # Rt do tweet
d2$ptw1 <-NA # Prob(Rt tweet >1)
d2$Rtwlr <-NA # lim inf IC Rt tweet
d2$Rtwur <-NA  # lim sup IC Rt tweet
for(i in 1:10) d2[d2$APS==listaAPS[i],c("Rtw","ptw1","Rtwlr","Rtwur")] <- Rt.beta(d2$tweets[d2$APS==listaAPS[i]])
# Rt > 1 se pr(Rt >1) > pcrit por lag weeks  # serve tanto para Rt de tweet como para casos
Rtgreat1 <- function(p1,pcrit=0.8,lag=0){
t1<-as.numeric(p1>pcrit)
le <- length(t1)
if (lag==0) ac<-t1[1:le]
if (lag>0) {
ini <- lag # ini <- (lag+1)
ac <- t1[ini:le]
for(i in 1:(ini-1)) ac <- ac+t1[(ini-i):(le-i)]
ac<-c(rep(NA,(ini-1)),ac)
}
ac
}
# Calcula se Rt(tweet) > 1
for(i in 1:10) d2$twgreat1[d2$APS==listaAPS[i]] <-Rtgreat1(d2$ptw1[d2$APS==listaAPS[i]],pcrit=0.85,lag=0)
# alertaRtweet = acumulado de Rt>1 por 3 vezes
for(i in 1:10) d2$alertaRtweet[d2$APS==listaAPS[i]] <-Rtgreat1(d2$ptw1[d2$APS==listaAPS[i]],pcrit=0.85,lag=3)
# calculo do Rt de dengue
d2$Rt <-NA
d2$pRt1 <-NA
d2$Rtlr <-NA
d2$Rtur <-NA
for(i in 1:10) d2[d2$APS==listaAPS[i],c("Rt","pRt1","Rtlr","Rtur")] <- Rt.beta((d2$casosm[d2$APS==listaAPS[i]]))
#  imputa os P(Rt) de casos faltantes com p(Rtw) dos tweets
d2$pRti <- d2$pRt1
d2$pRti[is.na(d2$pRt1)]<-d2$ptw1[is.na(d2$pRt1)]
# Rt(dengue) > 1 se Pr>0.85
for(i in 1:10) d2$Rtgreat1[d2$APS==listaAPS[i]] <-Rtgreat1(d2$pRti[d2$APS==listaAPS[i]],pcrit=0.85,lag=0)
# alertaRt = acumulado de Rt>1 por 3 vezes
for(i in 1:10) d2$alertaRt[d2$APS==listaAPS[i]] <-Rtgreat1(d2$pRti[d2$APS==listaAPS[i]],pcrit=0.85,lag=3)
# Casos:
# onde houver dados faltantes, completar calculando o valor esperado considerando a tendencia de variacao das ultimas 3 semanas.
# Isso é, calcula a média de variacao (Rt) das ultimas 3 semanas e multiplica pelo valor observado de casos.
fillCasos <- function(casos, Rt){
casos_est <- casos
n <- which(is.na(casos_est))
if(length(n)>0) casos_est[n]<-casos[(n-2)]*mean(Rt[(n-2)],na.rm=TRUE)
casos_est
}
d2$casos_est<-NA
for(i in 1:10) d2$casos_est[d2$APS==listaAPS[i]]<-fillCasos((d2$casos[d2$APS==listaAPS[i]]),
d2$Rt[d2$APS==listaAPS[i]])
d2$inc <- d2$casos_est/d2$Pop2010*100000
d2$alertaCasos <- as.numeric(d2$inc>100)
#Resultado
# - alertaClima = 1, se temperatura > 22C por mais de 3 semanas
# - alertaTweet = 1, se Tweet com tendencia de aumento
# - alertaTransmissao = 1, se casos com tendencia de aumento
# - alertaCasos = 1, se Incidencia > 100 por 100 mil
le = length(d2$tmin[d2$APS==listaAPS[1]])
#funcao que define cor
def.cor<-function(d2v){
# d2v = dados de uma ap
# 1 = verde, 2=amarelo, 3 =laranja, 4 = vermelho
les = dim(d2v)[1]
d2v$cor <-NA
d2v$cor[intersect(6:les,which(d2v$alertaCli<3 & d2v$alertaRtweet<3 & d2v$alertaRt<3 & d2v$alertaCasos==0))]<-1
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3 | d2v$alertaRtweet>=3))]<-2
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3| d2v$alertaRtweet>=3)+1)]<-2 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3| d2v$alertaRtweet>=3)+2)]<-2 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCli>=3| d2v$alertaRtweet>=3)+3)]<-2 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3))]<-3
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3)+1)]<-3 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3)+2)]<-3 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaRt>=3)+3)]<-3 # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1))]<-4
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1)+1)]<-4  # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1)+2)]<-4   # inercia para desligar
d2v$cor[intersect(6:les,which(d2v$alertaCasos==1)+3)]<-4
d2v
}
d2$cor<-NA
for(i in 1:10) d2[d2$APS==listaAPS[i],]<-def.cor(d2[d2$APS==listaAPS[i],])
# codificacao para o relatorio
d2$alertaTweet <- ifelse(d2$alertaRtweet>=3,1,0)
d2$alertaClima <- ifelse(d2$alertaCli>=3,1,0)
d2$alertaTransmissao <- ifelse(d2$alertaRt>=3,1,0)
d2$nivel<-"nulo"
d2$nivel[d2$cor==1]<-"verde"
d2$nivel[d2$cor==2]<-"amarelo"
d2$nivel[d2$cor==3]<-"laranja"
d2$nivel[d2$cor==4]<-"vermelho"
d2
}
d2<-geraAlerta(d)
source("geraAlerta/geraAlerta.r")
head(d)
listaAPS<-unique(d$APS)
# data.frame para colocar os resultados
SE<-d$SE[d$APS==listaAPS[1]]
d2 <- expand.grid(SE=SE,APS=listaAPS)
d2<-merge(d2,d[,c("SE","APS","data","tweets","estacao","casos","casosm","tmin")],by=c("SE","APS")) # precisa especificar colunas?
# agregar dados de populacao (cuidado, desorganiza tudo!)
pop<-read.csv(file=pop)
d2<-merge(d2,pop)
pop="tabelas/populacao2010porAPS_RJ.csv"
pop<-read.csv(file=pop)
d2<-merge(d2,pop)
d2<-d2[order(d2$APS,d2$SE),]
detcli <- function(temp,tempcrit=tempcrit,lag=3){
t1<-as.numeric(temp>=tempcrit)
le <- length(t1)
ac <- t1[lag:le]
for(i in 1:(lag-1)) ac <- ac+t1[(lag-i):(le-i)]
c(rep(NA,(lag-1)),ac)
}
d2$alertaCli <- NA
for(i in 1:10) d2$alertaCli[which(d2$APS==listaAPS[i])] <-detcli(d2$tmin[d2$APS==listaAPS[i]])
d2$alertaCli <- NA
i=1
d2$alertaCli[which(d2$APS==listaAPS[i])]
detcli(d2$tmin[d2$APS==listaAPS[i]])
d2$tmin
d2$APS==listaAPS[i]
d2$tmin[d2$APS==listaAPS[i]]
detcli(22)
tempcrit
tempcrit=22
detcli(22)
temp=22
temp=23
t1<-as.numeric(temp>=tempcrit)
t1
le <- length(t1)
ac <- t1[lag:le]
temp=c(22,23,24,25,26)
t1<-as.numeric(temp>=tempcrit)
t1
le <- length(t1)
ac <- t1[lag:le]
lag=3
ac <- t1[lag:le]
ac
for(i in 1:(lag-1)) ac <- ac+t1[(lag-i):(le-i)]
c(rep(NA,(lag-1)),ac)
detcli <- function(temp,tempcrit=tempcrit,lag=3){
t1<-as.numeric(temp>=tempcrit)
le <- length(t1)
ac <- t1[lag:le]
for(i in 1:(lag-1)) ac <- ac+t1[(lag-i):(le-i)]
c(rep(NA,(lag-1)),ac)
}
detcli(temp)
detcli(21:26)
detcli <- function(temp,tempcrit=22,lag=3){
t1<-as.numeric(temp>=tempcrit)
le <- length(t1)
ac <- t1[lag:le]
for(i in 1:(lag-1)) ac <- ac+t1[(lag-i):(le-i)]
c(rep(NA,(lag-1)),ac)
}
detcli(21:26)
for(i in 1:10) d2$alertaCli[which(d2$APS==listaAPS[i])] <-detcli(d2$tmin[d2$APS==listaAPS[i]])
source("geraAlerta/geraAlerta.r")
source("geraAlerta/geraAlerta.r")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ovi <- "dados_brutos/ovitrampa/IPO_Rio_Mar2015.csv"
dadosAPS<-"dados_limpos/dadosAPS_201518.csv"
source("organizaDados//juntaTudo.r")
source("organizaDados/organizaTemperatura.r")
source("organizaDados/organizatweets.r")
source("organizaDados/organizasinan.r")
source("organizaDados/juntaTudo.r")
dadosAPS<-"dados_limpos/dadosAPS_201518.csv"
source("geraAlerta/geraAlerta.r")
ovi<-read.csc(ovi)
ovi<-read.csv(ovi)
ovi
ovi<-read.csv2(ovi)
ovi<-read.csv(ovi,sep=";")
ovifile <- "dados_brutos/ovitrampa/IPO_Rio_Mar2015.csv"
ovi<-read.csv(ovifile,sep=";")
ovi$Date <- as.Date(ovi$Date, "%d.%m.%y")
source("geraAlerta/geraAlerta.r")
ovi$ipo <- ovi$IPO
ovi$ipo[ovi$ipo==0] <- NA
oviRJ <- aggregate(cbind(IPO, ipo)~Date, data=ovi, FUN=mean, na.action=na.pass)
#bar
gRJ<-ggplot(oviRJ, aes(x=Date, y=ipo))
gRJ + geom_bar(stat="identity") +
theme_bw(base_size=11, base_family="Arial") +
labs(y = "IPO", x="") +
ggtitle("Índice de positividade de ovitrampas - Rio de Janeiro")
#line
gRJ + geom_line() +
theme_bw(base_size=11, base_family="Arial") +
labs(y = "IPO", x="") +
ggtitle("Índice de positividade de ovitrampas no Rio de Janeiro")
source("geraAlerta/geraAlerta.r")
<br> </br>
Confira a situação da dengue na cidade do Rio de Janeiro. Mais detalhes, ver: [www.dengue.mat.br](www.dengue.mat.br)
source("geraAlerta/geraAlerta.r")
source("geraAlerta/geraAlerta.r")
setwd("~/Documentos/AlertaDengueAnalise/GeraAlerta")
ovifile <- "dados_brutos/ovitrampa/IPO_Rio_Mar2015.csv"
source("geraAlerta/geraAlerta.r")
ovi<-read.csv(ovifile,sep=";")
ovifile
ovi<-read.csv(ovifile,sep=";")
source("geraAlerta/geraAlerta.r")
dir()
ovifile <- "dados_brutos/ovitrampa/IPO_Rio_Mar2015.csv"
dadosAPS<-"dados_limpos/dadosAPS_201518.csv"
source("geraAlerta/geraAlerta.r")
