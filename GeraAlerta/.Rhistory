30000*0.26
1560+7800+5477
1600+7800+5500
14900+500+1000+5000
21400+13000
8000*0.24
3*15*340
3*15*340
30000*0.24
1/0.24
6000*0.24
10000*0.24
8000*0.24
7000*0.24
10*6*340*0.24
12000*0.24
3*15*340
3*15*340*0.24
8000*0.24
1000*0.24
11700+6000+500
18200+500+1000+5000
13000+380+34700
19000+500+1000+5000
25500+13380
25500+13000+380
library(MASS)
library(coda)
library(R2OpenBUGS)
d <- read.csv("dados/dadosAPS_201532.csv")
names(d)
setwd("/media/claudia/6466-6636/Docs_completo/Linhas de Pesquisa/Dengue/alerta/ModelagemBayesiana")
library(MASS)
library(coda)
library(R2OpenBUGS)
d <- read.csv("dados/dadosAPS_201532.csv")
names(d)
d1 <- subset(d,APS=="AP1")
d1 <- d1[55:293,]
str(d1)
d1$tweets[which(is.na(d1$tweets))]<-50 # so um truque - corrigir depois
glm(casos~tweets,data=d1,family = "poisson")
file.show("alertamodel01.txt")
bugsdata <- list(N=nrow(d1), tw=d1$tweets,casos=d1$casos)
init1 <- list(beta0 = 3, beta1 = 0.0)
init2 <- list(beta0 = 3, beta1 = 0.0)
inits <- list(init1,init2)
bugsparam <- c("beta0", "beta1", "lambda")
results <- bugs(bugsdata, inits=inits, bugsparam, model.file = "alertamodel01.txt",
n.burnin = 1000, n.thin = 5, n.iter = 10000, n.chains = 2,
DIC=T,debug=F)
results1 <- as.mcmc.list(results)
plot(results1,ask=T)
x11()
plot(results1,ask=T)
x11()
x11()
plot(results1,ask=T)
gelman.diag(results1)
summary(results1)
results$DIC
lambda <- results$sims.list$lambda
plot(d1$casos
)
apply(lambda,2,mean)
head(labda)
head(lambda)
?apply
fittedmean <- apply(lambda,2,mean)
plot(d1$casos,fittedmean,pch=20,ylab="fitted mean",xlab="observations")
title("Fitted vs observed values")
plot(d1$casos)
lines(apply(lambda,2,quantile,probs=0.025),col="red")
lines(apply(lambda,2,quantile,probs=0.5),col="blue")
lines(apply(lambda,2,quantile,probs=0.975),col="red")
preds <- matrix(nrow=nrow(lambda),ncol=nrow(d1))
for(i in 1:nrow(lambda)){
preds[i,] <- rpois(nrow(d1),lambda=lambda[i,])
}
plot(d1$casos)
lines(apply(preds,2,quantile,probs=0.5),col="blue")
lines(apply(preds,2,quantile,probs=0.025),col="red")
lines(apply(preds,2,quantile,probs=0.975),col="red")
title("Predicted vs observed values")
b0 <- unlist(results[,"b0"])
b0 <- unlist(results[,"beta0"])
b0 <- unlist(results[,])
results
pred.var <- apply(preds,1,var)
par(cex=1.3,lwd=2)
plot(density(pred.var),main="Posterior distr. of sample variance")
abline(v=var(d1$casos))
text(35,0,"Actual")
pred.var <- apply(preds,1,var)
par(cex=1.3,lwd=2)
plot(density(pred.var),main="Posterior distr. of sample variance")
plot(density(pred.var),main="Posterior distr. of sample variance")
abline(v=var(d1$casos))
text(35,0,"Actual")
print(paste("p-value = ",round(mean( pred.var > var(d1$casos) ),3),sep=""))
setwd("~/Documentos/AlertaDengueAnalise/GeraAlerta")
rm(list=ls())
library(knitr)
library(markdown)
library(foreign)
library(rmongodb)
library(rgeos)
library(maptools)
library(ggplot2)
source("fun/callmongoclima.r")
source("organizaDados/organizaTemperatura.r")
source("organizaDados/organizatweets.r")
novosinan2014 <- "dados_brutos/sinan/Dengue2014_23_03_2015.dbf"
novosinan2015 <- "dados_brutos/sinan/Dengue2015_24_08_2015.dbf"
source("organizaDados/organizasinan.r")
source("organizaDados/juntaTudo.r")
ovifile <- "dados_brutos/ovitrampa/IPO_RioJul2015.csv"
ovi<-read.csv(ovifile,sep=";",dec=",")
dadosAPS<-"dados_limpos/dadosAPS_201533.csv"
source("geraAlerta/geraAlerta.r")
setwd("~/Documentos/AlertaDengueAnalise/GeraAlerta")
#=============================
# Script para atualizar dados
#=============================
rm(list=ls())
# Requer
library(knitr)
library(markdown)
library(foreign)
library(rmongodb)
library(rgeos)
library(maptools)
library(ggplot2)
source("fun/callmongoclima.r")
# A1. Atualizar dados de temperatura (verificar se tem conexÃ£o internet):
source("organizaDados/organizaTemperatura.r")
# A2. Atualizar dados de tweet:
source("organizaDados/organizatweets.r")
novosinan2014 <- "dados_brutos/sinan/Dengue2014_23_03_2015.dbf"
novosinan2015 <- "dados_brutos/sinan/Dengue2015_31_08_2015.dbf"
# esse source retorna os casos que nao foram geolocalizados, verificar se algum pode
# ser resolvido. A tabela APS-bairro esta na pasta tabelas.
source("organizaDados/organizasinan.r")
# A4. Juntar todos os dados numa unica tabela
source("organizaDados/juntaTudo.r")
# A5. Dados das ovitrampas (ainda nao integrado ao resto)
ovifile <- "dados_brutos/ovitrampa/IPO_RioJul2015.csv"
ovi<-read.csv(ovifile,sep=";",dec=",")
dadosAPS<-"dados_limpos/dadosAPS_201534.csv"
source("geraAlerta/geraAlerta.r")
