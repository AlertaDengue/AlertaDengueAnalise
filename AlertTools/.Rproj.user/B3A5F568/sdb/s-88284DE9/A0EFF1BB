{
    "contents" : "# PROJETO ALERTA DENGUE -------------------------------------\n# FUNCOES PARA ORGANIZAR SERIES\n#TEMPORAIS A PARTIR DOS DADOS BRUTOS CLAUDIA CODECO - 2015\n\n# GetWU --------------------------------------------------------\n#'@description Create weekly time series from meteorological station data in server\n#'@title Get Climate Data\n#'@param stations vector with the stations codes (4 digits) OR the city's geocode.\n#'@param var climate variables (default var=\"all\": all variables available )\n#'@param finalday last day. Default is the last available. \n#'@return data.frame with the weekly data (cidade estacao data tmin tmed tmax umin umed umax pressaomin pressaomed pressaomax)\n#'@examples\n#'res = getWU(stations = c('SBRJ','SBJR','SBAF','SBGL'))\n#'head(res)\n#'res = getWU(stations = c(330455))\n#'head(res)\n#'res = getWU(stations = 'SBRJ', var=\"tmin\", finalday = \"2013-10-10\")\n\ngetWU <- function(stations, var = \"all\", finalday = Sys.Date(), datasource = \"data/WUdata.rda\") {\n    \n    stopifnot(all(nchar(stations) == 6) || all(nchar(stations) == 4)) # incluir teste de existencia da cidade\n  \n    # Test data -------------------------------------------\n    if (datasource == \"data/WUdata.rda\") load(datasource)\n    \n    # if cities are given as argument\n    if (all(nchar(stations) == 6)) { \n        if (datasource == \"data/WUdata.rda\") sta = unique(WUdata$estacao[WUdata$cidade%in%stations]) \n        message(\"the stations belong to the following cities:\")\n        print(sta)\n    } \n    # if stations are given as argument\n    if (all(nchar(stations) == 4)) {  \n        if (datasource == \"data/WUdata.rda\") {\n          cities = unique(WUdata$cidade[WUdata$estacao%in%stations])\n          sta = stations\n        }\n        message(\"the following stations were found:\")\n        print(sta)\n    }\n    \n    # getting the climate data (all from each sta)------------------------------\n    \n    if (datasource == \"data/WUdata.rda\") {\n      if (all(nchar(stations) == 6)) d <- WUdata\n      else d <- subset(WUdata, estacao %in% stations)\n    }\n    \n    # trimming data -----------------------------------------------------------\n    d <- subset(d, as.Date(d$data, format = \"%Y-%m-%d\") <= finalday)\n    \n    # Atribuir SE e agregar por semana-----------------------------------------\n    d$SE <- data2SE(d$data, format = \"%Y-%m-%d\")\n    n = dim(d)[2] - 1\n    df <- aggregate(d[, 4:n], by = list(cidade = d$cidade, SE = d$SE, estacao = d$estacao), \n                    FUN = mean, na.rm = TRUE)\n    \n    if (var != \"all\") df <- subset(df, select = c(\"cidade\",\"SE\",\"estacao\",var))\n    df\n}\n \n# GetTweet --------------------------------------------------------------\n#'@description Create weekly time series from tweeter data from server. The \n#'source of this data is the Observatorio da Dengue (UFMG).\n#'@title Get Tweeter Data\n#'@param city city's geocode.\n#'@param finalday last day. Default is the last available.\n#'@param datasource server or \"data/tw.rda\" if using test dataset. \n#'@return data.frame with weekly counts of people tweeting on dengue.\n#'@examples\n#'res = getTweet(city = c(330455)) # Rio de Janeiro\n#'tail(res)\n#'res = getTweet(city = c(330455), lastday = \"2014-03-01\") # Rio de Janeiro\n#'tail(res)\n\n\ngetTweet <- function(city, lastday = Sys.Date(), datasource = \"data/tw.rda\") {\n  \n  stopifnot(all(nchar(city) == 6)) # incluir teste de existencia da cidade  \n  if (datasource == \"data/tw.rda\") load(datasource)\n  \n  tw <- subset(tw, as.Date(data, format = \"%Y-%m-%d\") <= lastday)\n  \n  # Atribuir SE e agregar por semana-----------------------------------------\n  tw$SE <- data2SE(tw$data, format = \"%Y-%m-%d\")\n  twf <- aggregate(tw[,2], by = list(SE = tw$SE), FUN = sum, na.rm = TRUE)\n  names(twf)[2] <- \"tweet\"\n  N = dim(twf)[1]\n  twf <- cbind(localidade = rep(city, N), twf)\n  twf\n}\n\n\n# GetCases --------------------------------------------------------------\n#'@description Create weekly time series from case data from server. The source is the SINAN. \n#'@title Get Case Data and aggregate per week and area\n#'@param city city's geocode.\n#'@param finalday last day. Default is the last available.\n#'@param disease default is \"dengue\".\n#'@param withdivision either FALSE if aggregation at the city level, or TRUE.\n#'@param datasource data server or \"data/sinan.rda\" if using local test data. \n#'@return data.frame with the data aggregated per week according to disease onset date.\n#'@examples\n#'dC0 = getCases(city = c(330455), withdivision = TRUE) # Rio de Janeiro\n#'head(dC0)\n#'dC0 = getCases(city = c(330455), withdivision = FALSE) \n#'tail(dC0)\n#'dC0 = getCases(city = c(330455), lastday =\"2014-03-10\", withdivision = FALSE) \n#'tail(dC0)\n\ngetCases <- function(city, lastday = Sys.Date(),  withdivision = TRUE, disease = \"dengue\", datasource = \"data/sinan.rda\") {\n  \n  stopifnot(all(nchar(city) == 6)) # incluir teste de existencia da cidade  \n  \n  if (datasource == \"data/sinan.rda\") load(datasource)\n  \n  dd <- subset(sinan, DT_DIGITA <= lastday)\n  if (withdivision == FALSE){\n    st <- aggregate(dd$SEM_PRI,by=list(dd$SEM_PRI),FUN=length)\n    names(st)<-c(\"SE\",\"casos\")\n    st$SE<-as.numeric(as.character(st$SE))\n    st <- cbind(localidade = city, st)\n  } else {\n    st <- aggregate(dd$SEM_PRI,by=list(bairro=dd$NM_BAIRRO, SE=dd$SEM_PRI),\n                    FUN=length)\n    names(st)[3]<-c(\"casos\")\n    st$SE<-as.numeric(as.character(st$SE))  \n    }  \n  st  \n}\n\n\n# casesinlocality --------------------------------------------------------------\n#'@description Get time series of cases generated by getCases withdivision=TRUE \n#'and aggregate it per health district. Requires a file containing the list of \n#'neighborhoods in the city and their corresponding health districts. \n#'@title Get disagreggated time series of cases and aggregate per health district \n#'@param obj data.frame created by getCases with withdivision = TRUE (per bairro) \n#'@param division data.frame with bairros and corresponding health districts. The neighborhood\n#'names must match exactly the ones in the sinan. If \"test\" uses test data from Rio.  \n#'@return data.frame with the data aggregated per health district and week\n#'@examples\n#'dC0 = getCases(city = c(330455), withdivision = TRUE) # Rio de Janeiro\n#'dC1 = casesinlocality(obj = dC0, locality = \"AP1\") \n#'head(dC1)\n#' Gives an error message: dataframe contains no column BAIRRO. \n#'dC0 = getCases(city = c(330455), withdivision = FALSE) \n#'dC1 = casesinlocality(obj = dC0, locality = \"AP1\") # Rio de Janeiro\n#'head(dC1)\n\ncasesinlocality <- function(obj, locality){\n  \n  if(!all(c(\"bairro\", \"SE\", \"casos\") %in% names(dC0))) stop(\"only use function caseinlocality \n                                                             with dataframe with columns bairro, SE, casos.\n                                                             Use the output of getCases(withdivision=TRUE)\")\n  # trocar locs depois pelo acesso direto ao servidor\n  load(\"data/locs.rda\")\n  bair <- subset(locs, APS == locality)\n  \n  if(dim(bair)[1]==0) warning(\"no case in this locality\")\n  # dataframe para guardar os resultados\n  load(\"R/sysdata.rda\")\n  semanas <- SE$Ano * 100 + SE$SE\n  semin <- which(semanas == min(obj$SE))\n  semax <- which(semanas == max(obj$SE))\n  st <- data.frame(localidade=locality, SE=semanas[semin:semax], casos = NA)\n  \n  # selecionando os registros dos bairros da localidade\n  db <- obj[(obj$bairro %in% bair$bairro),]\n    \n  for(i in 1:dim(st)[1]) st$casos[i] <- sum(db$SE == st$SE[i])\n    \n  return(st)\n}\n\n\n\n# mergedata --------------------------------------------------------------\n#'@description Merge cases, tweets and climate data for the alert  \n#'@title Merge cases, tweets and climate data.\n#'@param cases data.frame with aggregated cases by locality (or city) and epidemiological week.\n#'@param tweet data.frame with tweets aggregated per week\n#'@param climate data.frame with climate data aggregated per week for the station of interest.\n#'@return data.frame with all data available \n#'@examples\n#'cas = getCases(city = c(330455), lastday =\"2014-03-10\", withdivision = FALSE) \n#'tw = getTweet(city = c(330455), lastday = \"2014-03-10\")\n#'clima = getWU(stations = 'SBRJ', var=\"tmin\", finalday = \"2014-03-10\")\n#'mergedata(cases = cas,tweet = tw, climate = clima)\n#'mergedata(tweet = tw, climate = clima)\n#'mergedata(cases = cas, climate = clima)\n#'mergedata(tweet = tw, climate = clima)\n\nmergedata <- function(cases = c(), tweet =c(), climate=c()){\n  # checking the datasets\n  if (!is.null(cases) & !all(table(cases$SE)==1)) stop(\"merging require one line per SE in case dataset\")\n  if (!is.null(tweet) & !all(table(tweet$SE)==1)) stop(\"merging require one line per SE in tweet dataset\")\n  if (!is.null(climate) & !all(table(climate$SE)==1)) stop(\"merging require one line per SE in climate dataset\")\n  \n  # merging\n  if (is.null(cases)) d <- merge(tweet, climate, by=\"SE\", all = TRUE)\n  if (is.null(tweet)) d <- merge(cases, climate,  by=\"SE\", all = TRUE)\n  if (is.null(climate)) d <- merge(cases, tweet,  by=\"SE\", all = TRUE)\n  if (!(is.null(cases) | is.null(tweet) | is.null(climate))){\n    d <- merge(cases, tweet,  by=\"SE\", all = TRUE)\n    d <- merge(d, climate,  by=\"SE\", all=TRUE)  \n  }\n  \n  d\n}\n\n",
    "created" : 1444067943636.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2336850932",
    "id" : "A0EFF1BB",
    "lastKnownWriteTime" : 1445786107,
    "path" : "~/Documentos/AlertaDengueAnalise/AlertTools/R/get_timeseries.R",
    "project_path" : "R/get_timeseries.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}