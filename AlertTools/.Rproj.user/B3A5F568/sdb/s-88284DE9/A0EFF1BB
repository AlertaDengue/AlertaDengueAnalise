{
    "contents" : "# PROJETO ALERTA DENGUE -------------------------------------\n# FUNCOES PARA ORGANIZAR SERIES\n#TEMPORAIS A PARTIR DOS DADOS BRUTOS CLAUDIA CODECO - 2015\n\n# GetWU --------------------------------------------------------\n#'@description Create weekly time series from meteorological station data in server\n#'@title Get Climate Data\n#'@param stations vector with the stations codes (4 digits) OR the city's geocode.\n#'@param var climate variables (default var=\"all\": all variables available )\n#'@return data.frame with the weekly data (cidade estacao data tmin tmed tmax umin umed umax pressaomin pressaomed pressaomax)\n#'@examples\n#'res = getWU(stations = c('SBRJ','SBJR','SBAF','SBGL'))\n#'head(res)\n#'res = getWU(stations = c(330455))\n#'head(res)\n#'res = getWU(stations = 'SBRJ', var=\"tmin\")\n\ngetWU <- function(stations, var = \"all\",datasource = \"test\") {\n    \n    stopifnot(all(nchar(stations) == 6) || all(nchar(stations) == 4)) # incluir teste de existencia da cidade\n  \n    if (datasource == \"test\") load(\"data/WUdata.rda\")\n    \n    # if cities are given as argument\n    if (all(nchar(stations) == 6)) { \n        if (datasource == \"test\") sta = unique(WUdata$estacao[WUdata$cidade%in%stations]) \n        message(\"the stations belong to the following cities:\")\n        print(sta)\n    } \n    # if stations are given as argument\n    if (all(nchar(stations) == 4)) {  \n        if (datasource == \"test\") {\n          cities = unique(WUdata$cidade[WUdata$estacao%in%stations])\n          sta = stations\n        }\n        message(\"the following stations were found:\")\n        print(sta)\n    }\n    \n    # getting the climate data (all from each sta)------------------------------\n    \n    if (datasource == \"test\") {\n      if (all(nchar(stations) == 6)) d <- WUdata\n      else d <- subset(WUdata, estacao %in% stations)\n    }\n    \n    # Atribuir SE e agregar por semana-----------------------------------------\n    d$SE <- data2SE(d$data, format = \"%Y-%m-%d\")\n    n = dim(d)[2] - 1\n    df <- aggregate(d[, 4:n], by = list(cidade = d$cidade, SE = d$SE, estacao = d$estacao), \n                    FUN = mean, na.rm = TRUE)\n    \n    if (var != \"all\") df <- subset(df, select = c(\"SE\",\"estacao\",var))\n    df\n}\n \n# GetTweet --------------------------------------------------------------\n#'@description Create weekly time series from tweeter data from server. The \n#'source of this data is the Observatorio da Dengue (UFMG).\n#'@title Get Tweeter Data\n#'@param city city's geocode.\n#'@param datasource server or \"test\" if using test dataset. \n#'@return data.frame with weekly counts of people tweeting on dengue.\n#'@examples\n#'res = getTweet(city = c(330455)) # Rio de Janeiro\n#'head(res)\n\ngetTweet <- function(city, datasource = \"test\") {\n  \n  stopifnot(all(nchar(city) == 6)) # incluir teste de existencia da cidade  \n  \n  if (datasource == \"test\") load(\"data/tw.rda\")\n  \n  # Atribuir SE e agregar por semana-----------------------------------------\n  tw$SE <- data2SE(tw$data, format = \"%Y-%m-%d\")\n  twf <- aggregate(tw[,2], by = list(SE = tw$SE), FUN = sum, na.rm = TRUE)\n  names(twf)[2] <- \"tweet\"\n  twf\n}\n\n\n# GetCases --------------------------------------------------------------\n#'@description Create weekly time series from case data from server. The source is the SINAN. \n#'@title Get Case Data and aggregate per week and area\n#'@param city city's geocode.\n#'@param disease default is \"dengue\".\n#'@param withdivision either FALSE if aggregation at the city level, or TRUE.\n#'@param datasource data server or \"test\" if using local test data. \n#'@return data.frame with the data aggregated per week according to disease onset date.\n#'@examples\n#'res = getCases(city = c(330455), withdivision = TRUE) # Rio de Janeiro\n#'head(res)\n#'res = getCases(city = c(330455), withdivision = FALSE) # Rio de Janeiro\n#'head(res)\n\ngetCases <- function(city, withdivision = TRUE, disease = \"dengue\", datasource = \"test\") {\n  \n  stopifnot(all(nchar(city) == 6)) # incluir teste de existencia da cidade  \n  \n  if (datasource == \"test\") load(\"data/sinan.rda\")\n  \n  if (withdivision == FALSE){\n    st <- aggregate(sinan$SEM_PRI,by=list(sinan$SEM_PRI),FUN=length)\n    names(st)<-c(\"SE\",\"casos\")\n    st$SE<-as.numeric(as.character(st$SE))    \n  } else {\n    st <- aggregate(sinan$SEM_PRI,by=list(SE=sinan$SEM_PRI, BAIRRO=sinan$NM_BAIRRO),\n                    FUN=length)\n    names(st)[3]<-c(\"casos\")\n    st$SE<-as.numeric(as.character(st$SE))  \n    }  \n  st  \n}\n\n\n# aggrbylocality --------------------------------------------------------------\n#'@description Get time series of cases generated by getCases withdivision=TRUE \n#'and aggregate it per health district. Requires a file containing the list of \n#'neighborhoods in the city and their corresponding health districts. \n#'@title Get disagreggated time series of cases and aggregate per health district \n#'@param d time series created by getCases with withdivision = TRUE (per bairro) \n#'@param division data.frame with bairros and corresponding health districts. The neighborhood\n#'names must match exactly the ones in the sinan. If \"test\" uses test data from Rio.  \n#'@return data.frame with the data aggregated per health district and week\n#'@examples\n#'res = getCases(city = c(330455), withdivision = TRUE) # Rio de Janeiro\n#'head(res)\n#'resd = aggrbylocality(d = res, locality = \"AP1\") # Rio de Janeiro\n#'head(resd)\n\naggrbylocality <- function(d, locality){\n\n  # trocar locs depois pelo acesso direto ao servidor\n  load(\"data/locs.rda\")\n  bair <- subset(locs, APS == locality)\n  \n  if(dim(bair)[1]==0) warning(\"no case in this locality\")\n  # dataframe para guardar os resultados\n  load(\"R/sysdata.rda\")\n  semanas <- SE$Ano * 100 + SE$SE\n  semin <- which(semanas == min(d$SE))\n  semax <- which(semanas == max(d$SE))\n  st <- data.frame(SE=semanas[semin:semax], casos = NA)\n  \n  # selecionando os registros dos bairros da localidade\n  db <- d[(d$BAIRRO %in% bair$bairro),]\n    \n  for(i in 1:dim(st)[1]) st$casos[i] <- sum(db$SE == st$SE[i])\n    \n  st\n}\n\n",
    "created" : 1444067943636.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1210133764",
    "id" : "A0EFF1BB",
    "lastKnownWriteTime" : 1445183835,
    "path" : "~/Documentos/AlertaDengueAnalise/AlertTools/R/get_timeseries.R",
    "project_path" : "R/get_timeseries.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}